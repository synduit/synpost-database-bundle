<?php

namespace Synduit\SynpostDatabaseBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Synduit\SynpostDatabaseBundle\Document\Subscriber;

/**
 * SubscriberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriberRepository extends DocumentRepository
{
    public function findSubscriberByEmail($domain, $email)
    {
        return $this->findOneBy(
            array(
              'domain' => $domain->getId(),
              'email' => new \MongoRegex('/^' . $email . '$/i'),
            )
        );
    }

    public function findActiveSubscriberByEmail($domain, $email, $filters)
    {
        return $this->findOneBy(
            array(
              'domain' => $domain->getId(),
              'email' => new \MongoRegex('/^' . $email . '$/i'),
              'grade' => array('$in' => $filters['grade']),
              'status' => array('$in' => $filters['status']),
              'active' => TRUE,
            )
        );
    }

    public function importSubscriber($rows, $domain, $emails, $terms)
    {
        foreach ($emails as $email) {
            if (!empty($rows[$email])) {
                $values = $rows[$email];
                $values['email'] = $email;
                $values['domain'] = $domain;
                // Assign grade T temporarily.
                $values['grade'] = 'T';

                $subscriber = $this->createSubscriber($values);
                $this->tagSubscriber($subscriber, $terms);
            }
        }
    }

    public function createSubscriber($values)
    {
        $subscriber = new Subscriber();
        $subscriber->setDomain($values['domain']);
        $subscriber->setCreated(time());

        $this->prepareFields($subscriber, $values);

        $dm = $this->getDocumentManager();
        $dm->persist($subscriber);

        return $subscriber;
    }

    public function updateImportedSubscriber($rows, $domain, $emails, $terms)
    {
        foreach ($emails as $email) {
            if (!empty($rows[$email])) {
                $subscriber = $this->findSubscriberByEmail($domain, $email);
                $values = $rows[$email];
                $values['email'] = $email;
                $values['active'] = true;

                // If subscriber is deleted then don't preserve terms.
                if ($subscriber->isActive()) {
                    $this->tagSubscriberMerge($subscriber, $terms);
                }
                else {
                    $this->tagSubscriber($subscriber, $terms);
                }
                $this->updateSubscriber($subscriber, $values);
            }
        }
    }

    public function findSubscribers($domain, $limit = null, $offset = null)
    {
        return $this->findBy(
            array(
              'domain' => $domain->getId(),
              'active' => TRUE,
            ), null, $limit, $offset
        );
    }

    /**
     * Search Subscribers by email or name or both.
     */
    public function findSubscriberContainsQuery($domain, $parameters, $limit = null,
     $offset = null)
    {
        $query = array(
            'domain' => $domain->getId(),
            'email' => new \MongoRegex('/' . $parameters['email'] . '/i'),
            'name' => new \MongoRegex('/' . $parameters['name'] . '/i'),
        );

        if (!empty($parameters['terms'])) {
            $query['terms'] = array('$in' => $parameters['terms']);
        }
        if (!empty($parameters['status'])) {
            $query['status'] = array('$ne' => $parameters['status']);
        }

        $query['active'] = true;
        $sort = !empty($parameters['order']) && !empty($parameters['sort']) ? array($parameters['order'] => $parameters['sort']) : NULL;
        return $this->findBy($query, $sort, $limit, $offset);
    }

    public function updateSubscriber($subscriber, $values)
    {
       $this->prepareFields($subscriber, $values);
    }

    /**
     * Set values to Documents.
     */
    private function prepareFields(&$subscriber, $values)
    {
        $subscriber->setEmail($values['email']);
        $subscriber->setUpdated(time());

        if (isset($values['fields'])) {
            $subscriber->setFields($values['fields']);
        }

        $name = '';
        if (isset($values['fname'])) {
            $name = $values['fname'];
            $subscriber->setFName($values['fname']);
        }
        if (isset($values['lname'])) {
            $name = $name . ' ' . $values['lname'];
            $subscriber->setLName($values['lname']);
        }
        if (isset($values['name']) && !empty($values['name'])) {
            $name = $values['name'];
        }

        // TODO Remove when synvalid api is ready.
        if (isset($values['grade'])) {
            $subscriber->setGrade($values['grade']);
        }
        if (isset($values['active'])) {
            $subscriber->setActive($values['active']);
        }

        $subscriber->setName($name);
    }

    public function deleteSubscriber($subscriber)
    {
        $subscriber->setActive(FALSE);
    }

    public function unsubscribeSubscriber($recipient, $status)
    {
        // When subscriber click on unsubscribe link from email body or it is marked as spam.
        if (isset($recipient['id'])) {
            $subscribers = array($this->find($recipient['id']));
        }
        // When email is get hard bounce.
        else {
            $subscribers = $this->findBy(array('email' => new \MongoRegex('/^' . $recipient['email'] . '$/i')));
        }

        if (!empty($subscribers)) {
            foreach ($subscribers as $subscriber) {
                $subscriber->setStatus($status);
            }
        }
    }

    /**
     * Find active subscribers to email need to be sent.
     */
    public function findActiveSubscribers($domain, $filters = array(),
        $limit = null, $offset = null)
    {
        // Find subscribers by terms and status.
        if (isset($filters['terms'])) {
            return $this->findBy(
                array(
                    'terms' => array('$in' => $filters['terms']),
                    'grade' => array('$in' => $filters['grade']),
                    'status' => array('$in' => $filters['status']),
                    'active' => TRUE,
                ), null, $limit, $offset
            );
        }

        return $this->findBy(
            array(
                'domain' => $domain->getId(),
                'grade' => array('$in' => $filters['grade']),
                'status' => array('$in' => $filters['status']),
                'active' => TRUE,
            ), null, $limit, $offset
        );
    }

    public function tagSubscriber($subscriber, $terms)
    {
        $old_terms = $subscriber->getTerms();
        // Remove all old tags.
        foreach ($old_terms as $old_term) {
          $subscriber->removeTerm($old_term);
        }
        // Update with new tags.
        foreach ($terms as $term) {
          $subscriber->addTerm($term);
        }
    }

    public function tagSubscriberMerge($subscriber, $terms)
    {
        // Update with new tags.
        foreach ($terms as $term) {
          $subscriber->addTerm($term);
        }
    }

    public function removeTermFromSubscribers($term)
    {
        $subscribers = $this->findSubscribersByTerm($term->getId());
        foreach ($subscribers as $subscriber) {
            $subscriber->removeTerm($term);
        }
    }

    /**
     * Find subscribers by term.
     */
    public function findSubscribersByTerm($term_id)
    {
        return $this->findBy(
            array(
                'terms' => $term_id,
                'active' => true,
            )
        );
    }

    public function updateSubscriberStats($subscriber, $stats)
    {
        if (isset($stats['sent'])) {
            $sent = $subscriber->getEmailSent();
            $subscriber->setEmailSent($sent + 1);
        }
        if (isset($stats['open'])) {
            $open = $subscriber->getEmailOpen();
            $subscriber->setEmailOpen($open + 1);
        }
        if (isset($stats['click'])) {
            $click = $subscriber->getEmailClick();
            $subscriber->setEmailClick($click + 1);
        }
    }

    public function setSubscriberDrip($subscriber, $drip)
    {
        $subscriber->addDrip($drip);
    }

    /**
     * Find subscribers by status.
     */
    public function getSubscirbersByStatus($domain, $status) {
        return $this->findBy(
            array(
              'domain' => $domain->getId(),
              'status' => $status,
              'active' => true,
            )
        );
    }

    /**
     * Update subscriber grade and status.
     */
    public function updateSubscriberGradeAndStatus($domain, $subscribers, $status) {
        foreach ($subscribers as $subscriber_id => $grade) {
            $subscriber = $this->find($subscriber_id);
            $subscriber->setGrade($grade);
            $subscriber->setStatus($status);
        }
    }

    public function countSubscribers($domain, $parameters = array()) {
        $query = $this->createQueryBuilder();
        $query->count();
        $query->field('domain')->equals($domain->getId());
        $query->field('email')->equals(new \MongoRegex('/' . $parameters['email'] . '/i'));
        $query->field('name')->equals(new \MongoRegex('/' . $parameters['name'] . '/i'));
        $query->field('active')->equals(true);

        if (!empty($parameters['terms'])) {
            $query->field('terms')->equals(array('$in' => $parameters['terms']));
        }
        if (!empty($parameters['status'])) {
            $query->field('status')->equals(array('$ne' => $parameters['status']));
        }

        return $query->getQuery()->execute();
    }

    /**
     * Count subscribers by term.
     */
    public function countSubscribersByTerm($term_id)
    {
        $query = $this->createQueryBuilder();
        $query->count();
        $query->field('active')->equals(true);
        $query->field('terms')->equals($term_id);

        return $query->getQuery()->execute();
    }

}
