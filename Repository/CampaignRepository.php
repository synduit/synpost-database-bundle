<?php

namespace Synduit\SynpostDatabaseBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Synduit\SynpostDatabaseBundle\Document\Campaign;

/**
 * CampaignRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampaignRepository extends DocumentRepository
{
    public function createCampaign($values)
    {
        $campaign = new Campaign();
        $campaign->setDomain($values['domain']);
        $this->prepareFields($campaign, $values);
        $dm = $this->getDocumentManager();
        $dm->persist($campaign);

        return $campaign;
    }

    public function findCampaignByName($domain, $name)
    {
        return $this->findOneBy(
            array(
              'name' => new \MongoRegex('/^' . $name . '$/i'),
              'domain' => $domain->getId(),
            )
        );
    }

    public function updateCampaign($campaign, $values)
    {
        $this->prepareFields($campaign, $values);
    }

    /**
     * Set values to Documents.
     */
    private function prepareFields(&$campaign, $values) {
        $campaign->setName($values['name']);
        $campaign->setBody($values['body']);
        $campaign->setSubject($values['subject']);
        $campaign->setStatus($values['status']);
        if (isset($values['scheduleDate'])) {
            $campaign->setScheduleDate($values['scheduleDate']);
        }

        if (isset($values['segment'])) {
            $campaign->setSegment($values['segment']);
        }
    }

    public function deleteCampaign($email_campaign)
    {
        $dm = $this->getDocumentManager();
        $dm->remove($email_campaign);
    }

    public function scheduleCampaign($email_campaign, $values)
    {
        $email_campaign->setScheduleDate($values['scheduleDate']);
        $email_campaign->setStatus($values['status']);

        return $email_campaign;
    }

    public function findCampaignsContainsQuery($domain, $parameters, $limit = null,
     $offset = null)
    {
        $query['domain'] = $domain->getId();
        if (!empty($parameters['status'])) {
            $query['status'] = new \MongoRegex('/^' . $parameters['status'] . '$/i');
        }
        if (!empty($parameters['from']) && !empty($parameters['to'])) {
            $query['scheduleDate'] = array(
                '$gte' => $parameters['from'],
                '$lte' => $parameters['to'],
            );
        }
        $sort = array('scheduleDate' => $parameters['sort']);

        return $this->findBy($query, $sort, $limit, $offset);
    }

    public function findCampaignForSending($last_campaign_process_timestamp, $current_time, $status)
    {
        return $this->findBy(
            array(
                'scheduleDate' => array(
                    '$gte' => $last_campaign_process_timestamp,
                    '$lte' => $current_time,
                ),
                'status' => $status,
            )
        );
    }

    /**
     * Find campagin by segment which are not sent.
     */
    public function findCampaignsBySegment($segment_id)
    {
         return $this->findBy(
            array(
                'segment' => $segment_id,
            )
        );
    }

    public function countCampaigns($domain, $parameters = array()) {
        $query = $this->createQueryBuilder();
        $query->count();
        $query->field('domain')->equals($domain->getId());
        if (!empty($parameters['status'])) {
            $query->field('status')->equals(new \MongoRegex('/^' . $parameters['status'] . '$/i'));
        }
        if (!empty($parameters['from']) && !empty($parameters['to'])) {
            $query->field('scheduleDate')->equals(array(
              '$gte' => $parameters['from'],
              '$lte' => $parameters['to'],
            ));
        }

        return $query->getQuery()->execute();
    }
}
