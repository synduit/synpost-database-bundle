<?php

namespace Synduit\SynpostDatabaseBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Synduit\SynpostDatabaseBundle\Document\Drip;


/**
 * DripRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DripRepository extends DocumentRepository
{
    public function createDrip($values)
    {
        $drip = new Drip();
        $drip->setDomain($values['domain']);
        $this->prepareFields($drip, $values);
        $dm = $this->getDocumentManager();
        $dm->persist($drip);

        return $drip;
    }

    public function findDripByName($domain, $name)
    {
        return $this->findOneBy(
            array(
              'name' => new \MongoRegex('/^' . $name . '$/i'),
              'domain' => $domain->getId(),
            )
        );
    }

    public function updateDrip($drip, $values)
    {
        $this->prepareFields($drip, $values);
    }

    /**
     * Set values to Documents.
     */
    private function prepareFields(&$drip, $values)
    {
        $drip->setName($values['name']);
    }

    public function deleteDrip($drip)
    {
        $drip->setActive(false);
    }

    public function findDrips($domain, $limit = null, $offset = null)
    {
        return $this->findBy(
            array(
              'domain' => $domain->getId(),
              'active' => true,
            ), null, $limit, $offset
        );
    }

    public function countDrips($domain, $parameters = array()) {
        $query = $this->createQueryBuilder();
        $query->count();
        $query->field('domain')->equals($domain->getId());
        $query->field('active')->equals(true);

        return $query->getQuery()->execute();
    }

}
