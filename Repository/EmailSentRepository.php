<?php

namespace Synduit\SynpostDatabaseBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Synduit\SynpostDatabaseBundle\Document\EmailSent;
use Synduit\SynpostDatabaseBundle\Document\Subscriber;

/**
 * EmailSentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmailSentRepository extends DocumentRepository
{
    public function createEmailSent($values, $options = array())
    {
        $dm = $this->getDocumentManager();
        $email_sent = new EmailSent();
        $email_sent->setEmail($values['email']);
        $email_sent->setMessageId($values['messageId']);
        if (isset($values['subscriber'])) {
            $email_sent->setSubscriber($values['subscriber']);
        }
        if (isset($options['campaign'])) {
            $email_sent->setCampaign($options['campaign']);
        }
        if (isset($options['dripMail'])) {
            $email_sent->setDripMail($options['dripMail']);
        }
        if (isset($options['autoresponder'])) {
            $email_sent->setAutoresponder($options['autoresponder']);
        }

        $dm->persist($email_sent);
    }

    public function updateEmailSent($message_id, $options, $filters)
    {
        if (!empty($message_id)) {
            $email_sent = $this->findEmailSentByMessageId($message_id);
        }
        else {
            $email_sent = $this->findEmailSentByEmailTypeAndSubscriber($filters);
        }

        if (!empty($email_sent)) {
            if (isset($options['status'])) {
                $email_sent->setStatus($options['status']);
            }
            if (isset($options['opened'])) {
                // Don't update status if it is already opened.
                if ($email_sent->isOpened()) {
                    return false;
                }
                $email_sent->setOpened($options['opened']);
            }
            if (isset($options['clicked'])) {
                // Don't update status if it is already clicked.
                if ($email_sent->isClicked()) {
                    return false;
                }
                $email_sent->setClicked($options['clicked']);
            }
            if (isset($options['timestamp'])) {
                $email_sent->setTimestamp($options['timestamp']);
            }
            if (isset($options['reason'])) {
                $email_sent->setReason($options['reason']);
            }
        }
        return true;
    }

    public function findEmailSentByMessageId($message_id)
    {
        $this->clear();
        return $this->findOneBy(
            array(
              'messageId' => $message_id,
            )
        );
    }

    public function findEmailSentByEmailTypeAndSubscriber($filters)
    {
        $this->clear();
        // Fetch email sent for Drip Mail or Campaign or Autoresponder.
        if (isset($filters['drip_mail_id'])) {
            return $this->findOneBy(
                array(
                  'dripMail' => $filters['drip_mail_id'],
                  'subscriber' => $filters['subscriber_id'],
                )
            );
        }
        elseif (isset($filters['campaign_id'])) {
            return $this->findOneBy(
                array(
                  'campaign' => $filters['campaign_id'],
                  'subscriber' => $filters['subscriber_id'],
                )
            );
        }
        elseif (isset($filters['autoresponder_id'])) {
            return $this->findOneBy(
                array(
                  'autoresponder' => $filters['autoresponder_id'],
                  'subscriber' => $filters['subscriber_id'],
                )
            );
        }
    }

    public function findEmailSentReportsByCampaign($campaign_id, $limit = null, $offset = null)
    {
        $this->clear();
        return $this->findBy(
            array(
              'campaign' => $campaign_id,
            ), null, $limit, $offset
        );
    }
}
