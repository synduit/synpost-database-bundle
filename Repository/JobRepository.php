<?php

namespace Synduit\SynpostDatabaseBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Synduit\SynpostDatabaseBundle\Document\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends DocumentRepository
{
    public function createJob($values, $info) {
        $dm = $this->getDocumentManager();
        $jobs = array();
        foreach ($values as $value) {
            $job = new Job();
            $job->setDomain($value['domain']);

            if (isset($value['sourceId'])) {
                $job->setSourceId($value['sourceId']);
            }
            if (isset($value['jobInput'])) {
                $job->setJobInput($value['jobInput']);
            }

            $job->setJobType($info['jobType']);
            $job->setStatus($info['status']);
            $job->setCreated(time());
            $dm->persist($job);
            $jobs[] = $job;
        }

        return $jobs;
    }

    public function updateJobStatus($job, $status, $options = array()) {
        $job->setStatus($status);
        $job->setUpdated(time());

        if (!empty($options['finished'])) {
            $job->setFinished($options['finished']);
        }
        if (!empty($options['started'])) {
            $job->setStarted($options['started']);
        }

        return $job;
    }

    public function findJobBySourceId($sourceId) {
        return $this->findOneBy(
            array(
              'sourceId' => $sourceId,
            )
        );
    }

    public function findJobByStatus($status) {
        return $this->findOneBy(
            array(
              'status' => $status,
            )
        );
    }

    public function findJobByStatusAndType($status, $type) {
        return $this->findOneBy(
            array(
              'status' => $status,
              'jobType' => $type,
            )
        );
    }

    public function findJob($status, $type) {
        return $this->findOneBy(
          array(
            'status' => $status,
            'jobType' => $type,
          )
        );
    }

    public function createJobReports($job, $reports) {
        $job->setReports($reports);
        $job->setUpdated(time());

        return $job;
    }

    public function findJobs($domain, $limit = null, $offset = null) {
        return $this->findBy(
            array(
              'domain' => $domain->getId(),
            ), null, $limit, $offset
        );
    }

    public function findJobsByStatusAndType($status, $type) {
        return $this->findBy(
          array(
            'status' => $status,
            'jobType' => $type,
          )
        );
    }

    public function countJobs($domain, $parameters = array()) {
        $query = $this->createQueryBuilder();
        $query->count();
        $query->field('domain')->equals($domain->getId());

        return $query->getQuery()->execute();
    }

    public function findImportSubscriberJobsProgress($statuses, $type) {
        return $this->findBy(
          array(
            'status' => array('$in' => $statuses),
            'jobType' => $type,
          )
        );
    }

    public function findImportSubscriberJob($status, $type, $domains) {
        return $this->findOneBy(
          array(
            'status' => $status,
            'jobType' => $type,
            'domain' => array('$nin' => $domains),
          )
        );
    }

}
