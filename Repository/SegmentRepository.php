<?php

namespace Synduit\SynpostDatabaseBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Synduit\SynpostDatabaseBundle\Document\Segment;

/**
 * SegmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SegmentRepository extends DocumentRepository
{
    /**
     * Set values to Documents.
     */
    private function prepareFields(&$segment, $values)
    {
        $segment->setName($values['name']);
        $old_terms = $segment->getTerms();

        // Remove all old terms.
        foreach ($old_terms as $old_term) {
          $segment->removeTerm($old_term);
        }
        // Update with new terms.
        foreach ($values['terms'] as $term) {
          $segment->addTerm($term);
        }
    }

    public function createSegment($values)
    {
        $segment = new Segment();
        $segment->setDomain($values['domain']);

        $this->prepareFields($segment, $values);

        $dm = $this->getDocumentManager();
        $dm->persist($segment);

        return $segment;
    }

    public function findSegments($domain, $limit = null, $offset = null)
    {
        return $this->findBy(
            array(
              'domain' => $domain->getId(),
              'active' => true,
            ), null, $limit, $offset
        );
    }

    public function updateSegment($segment, $values)
    {
       $this->prepareFields($segment, $values);
    }


    public function deleteSegment($segment)
    {
        $segment->setActive(false);
    }

    public function findSegmentByName($domain, $name)
    {
        return $this->findOneBy(
            array(
              'domain' => $domain->getId(),
              'name' => new \MongoRegex('/^' . $name . '$/i'),
              'active' => true,
            )
        );
    }

    public function findSegmentByTerms($term_ids)
    {
        return $this->findOneBy(
            array(
                'terms' => array('$in' => $term_ids),
            )
        );
    }

    public function countSegments($domain, $parameters = array()) {
        $query = $this->createQueryBuilder();
        $query->count();
        $query->field('domain')->equals($domain->getId());
        $query->field('active')->equals(true);

        return $query->getQuery()->execute();
    }

}
